install.packages("rafalib")
library(rafalib)
install.packages("swirl")
library(swirl)
swirl
swirl()
5 + 7
x = 5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3 ,4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
version
clear
cl
vec1 <- c(2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23)
vec1
mean(vec1)
swirl()
for (i in 1:24){}
x = 0
for (i in 1:25){
x <- x + i ^ 2
}
x
cars
type(cars)
head(cars)
class(cars)
len(cars)
length(cars)
width(cars)
size(cars)
dim(cars)
col(cars)
cars[,2]
mean(cars[,2])
?which
which(cars[,2] == 85)
x = 1
x
x = 1:10
y = c(1:10)
x == y
x = 1:10
y = rnorm(10)
plot(x, y)
fit(y ~ x)
fit = lm(y ~ x)
library(dplyr)
dat = read.csv("femaleMiceWeights.csv")
list(5:9, "r")
?melt
??melt
y <- 1:4
y
attr(y, "new attribute") <- "Here"
y
y <- 1:5
y
attr(y, "new attribute")
setwd("~/DataScience/Projects/Interview - Optus/Short-Project-NASA-Web-Logs/Code")
rm(list = ls())
options(java.parameters = "-Xmx8000m")
library(dplyr)
library(data.table)
source('extract_data.R')
options(scipen = 999)
# Using extract_data function to grab data from raw NASA web log files
df = extract_data('../../Data/nasa_19950630.22-19950728.12.tsv.gz')
rm(list = ls())
options(java.parameters = "-Xmx8000m")
library(dplyr)
library(data.table)
library(SparkR)
library(stringr)
library(lubridate)
filepath = "../../Data/nasa_19950630.22-19950728.12.tsv.gz"
sparkR.session()
sc <- sparkR.session()
sqlContext <- sparkRSQL.init(sc)
# Relocate data from Spark dataframe to R and split into columns
df = read.text(sqlContext, filepath)
df = collect(df)
df = str_split_fixed(df$value, "\t", 9)
colnames(df) <- as.character(unlist(df[1,]))
df = as.data.frame(df[-1, ])
# Conform column data types to expected data types
cols = c('host', 'logname', 'method', 'url', 'referer', 'useragent')
df[,cols] = apply(df[,cols], 2, function(x) as.character(x))
cols = c('response', 'bytes')
df[,cols] = apply(df[,cols], 2, function(x) as.integer(x))
# Save as data.table and transform time column into timestamp
df = as.data.table(df)
head(df)
class(df$time)
sparkR.session()
sc <- sparkR.session()
sqlContext <- sparkRSQL.init(sc)
# Relocate data from Spark dataframe to R and split into columns
df = read.text(sqlContext, filepath)
df = collect(df)
df = str_split_fixed(df$value, "\t", 9)
colnames(df) <- as.character(unlist(df[1,]))
df = as.data.frame(df[-1, ])
# Conform column data types to expected data types
cols = c('host', 'logname', 'method', 'url', 'referer', 'useragent')
df[,cols] = apply(df[,cols], 2, function(x) as.character(x))
cols = c('response', 'bytes')
df[,cols] = apply(df[,cols], 2, function(x) as.integer(x))
filepath = '../../Data/nasa_19950630.22-19950728.12.tsv.gz'
sparkR.session()
sc <- sparkR.session()
sqlContext <- sparkRSQL.init(sc)
# Relocate data from Spark dataframe to R and split into columns
df = read.text(sqlContext, filepath)
df = collect(df)
df = str_split_fixed(df$value, "\t", 9)
colnames(df) <- as.character(unlist(df[1,]))
df = as.data.frame(df[-1, ])
# Conform column data types to expected data types
cols = c('host', 'logname', 'method', 'url', 'referer', 'useragent')
df[,cols] = apply(df[,cols], 2, function(x) as.character(x))
cols = c('response', 'bytes')
df[,cols] = apply(df[,cols], 2, function(x) as.integer(x))
head(df0)
head(df)
class(df$time)
as.integer(df$time)
as.integer(as.string(df$time))
as.integer(as.String(df$time))
as.integer(as.character(df$time))
rm(list = ls())
options(java.parameters = "-Xmx8000m")
library(dplyr)
library(data.table)
source('extract_data.R')
options(scipen = 999)
# Using extract_data function to grab data from raw NASA web log files
df = extract_data('../../Data/nasa_19950630.22-19950728.12.tsv.gz')
df2 = extract_data('../../Data/nasa_19950731.22-19950831.22.tsv.gz')
df = rbind(df, df2)
rm(df2)
head(df)
min(df$time)
max(df$time)
head(df)
df$time[1]
df$time[1].hour
hour(df$time[1])
summary(df$time)
summary(hour(df$time))
table(hour(df$time))
as.data.table(table(hour(df$time)))
?as.data.table(0)
hour_freq = as.data.table(table(hour(df$time)))
hour_freq
colnames(hour_freq) = c("hour", "freq")
hour_freq
hour_freq
class(hour_freq)
p = ggplot(data=hour_freq, aes(x=hour, y=freq)) +
geom_col(aes(fill = set)) +
ggtitle('NASA web traffic by hour') +
ylab('Count') +
xlab('Hour of Day') +
scale_fill_manual("Dataset", values = c("missing" = "#F6991B", "complete" = "#00AEB7")) +
theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank())
library(ggplot2)
p = ggplot(data=hour_freq, aes(x=hour, y=freq)) +
geom_col(aes(fill = set)) +
ggtitle('NASA web traffic by hour') +
ylab('Count') +
xlab('Hour of Day') +
scale_fill_manual("Dataset", values = c("missing" = "#F6991B", "complete" = "#00AEB7")) +
theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank())
p
hour_freq
p = ggplot(data=hour_freq, aes(x=hour, y=freq)) +
geom_col(aes(fill = set)) +
ggtitle('NASA web traffic by hour') +
ylab('Count') +
xlab('Hour of Day')
p
p = ggplot(data=hour_freq, aes(x=hour, y=freq)) +
geom_col() +
ggtitle('NASA web traffic by hour') +
ylab('Count') +
xlab('Hour of Day')
p
hour_freq
hist(hour_freq, col = "#ce3f3f", xlab = "Time of Day", ylab = "Count",
main = "NASA web traffic by hour", nclass = 24, xlim=c(0,24))
hour_freq
clas(hour_freq$hour)
class(hour_freq$hour)
class(hour_freq$freq)
sapply(hour_freq, as.integer)
hour_freq
hour_freq = sapply(hour_freq, as.integer)
hist(hour_freq, col = "#ce3f3f", xlab = "Time of Day", ylab = "Count",
main = "NASA web traffic by hour", nclass = 24, xlim=c(0,24))
p = ggplot(data=hour_freq, aes(x=hour, y=freq)) +
geom_col() +
ggtitle('NASA web traffic by hour') +
ylab('Count') +
xlab('Hour of Day')
class(hour_freq)
hour_freq = as.data.table(table(hour(df$time)))
colnames(hour_freq) = c("hour", "freq")
hour_freq = sapply(hour_freq, as.integer)
class(hour_freq)
hour_freq = as.data.table(table(hour(df$time)))
colnames(hour_freq) = c("hour", "freq")
hour_freq = as.data.table(sapply(hour_freq, as.integer))
class(hour_freq)
hour_freq
p = ggplot(data=hour_freq, aes(x=hour, y=freq)) +
geom_col() +
ggtitle('NASA web traffic by hour') +
ylab('Count') +
xlab('Hour of Day')
p
p = ggplot(data=hour_freq, aes(x=hour, y=freq)) +
geom_col() +
ggtitle('NASA web traffic by hour') +
ylab('Count') +
xlab('Hour of Day') +
theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank())
p
p = ggplot(data=hour_freq, aes(x=hour, y=freq)) +
geom_col(color='blue') +
ggtitle('NASA web traffic by hour') +
ylab('Count') +
xlab('Hour of Day') +
theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank())
p
geom_col
?geom_col
p = ggplot(data=hour_freq, aes(x=hour, y=freq)) +
geom_col(fill='blue') +
ggtitle('NASA web traffic by hour') +
ylab('Count') +
xlab('Hour of Day') +
theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank())
p
p = ggplot(data=hour_freq, aes(x=hour, y=freq)) +
geom_col(fill='#00a3ad') +
ggtitle('NASA web traffic by hour') +
ylab('Count') +
xlab('Hour of Day') +
theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank())
p
rm(p)
rm(hour_freq)
# 1. Check NASA web average traffic over 24 hours-----
source('web_traffic.R')
web_plot = web_traffic_viz(web_traffic(df))
web_plot
head(df)
summary(df)
day(df$time[1])
df$time[1]
df$time[2]
df$time[10]
df$time[10000]
df$time[100000]
day(df$time[100000])
df$time[1]
date(df$time[1])
as.data.table(date(df$time[1]))
as.data.table(date(df$time))
as.data.table(table(date(df$time)))
web_traffic_ot = function(df){
day_freq = as.data.table(table(date(df$time)))
colnames(day_freq) = c("date", "freq")
day_freq = as.data.table(sapply(day_freq, as.integer))
return(day_freq)
}
web_traffic_ot(df)
day_freq = as.data.table(table(date(df$time)))
class(day_freq)
colnames(day_freq) = c("date", "freq")
class(day_freq)
web_traffic_ot = function(df){
day_freq = as.data.table(table(date(df$time)))
colnames(day_freq) = c("date", "freq")
day_freq$freq = as.integer(day_freq$freq)
return(day_freq)
}
day_freq = web_traffic_ot(df)
day_freq
web_traffic_ot_viz = function(day_freq){
p = ggplot(data=day_freq, aes(x=date, y=freq)) +
geom_col(fill='#00a3ad') +
ggtitle('NASA web traffic by date') +
ylab('Count of logged activities') +
xlab('Date') +
theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank())
return(p)
}
web_traffic_ot_viz(day_freq)
day_freq[1]
labels = c('1995-07-01', '1995-07-15', '1995-08-01', '1995-08-15', '1995-09-01')
p = ggplot(data=day_freq, aes(x=date, y=freq)) +
geom_col(fill='#00a3ad') +
ggtitle('NASA web traffic by date') +
ylab('Count of logged activities') +
xlab('Date') +
scale_x_discrete(breaks=labels, labels=as.character(labels)) +
theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank())
p
web_traffic_ot_viz = function(day_freq){
labels = c('1995-07-01', '1995-07-15', '1995-08-01', '1995-08-15', '1995-09-01')
p = ggplot(data=day_freq, aes(x=date, y=freq)) +
geom_col(fill='#00a3ad') +
ggtitle('NASA web traffic by date') +
ylab('Count of logged activities') +
xlab('Date') +
scale_x_discrete(breaks=labels, labels=as.character(labels)) +
theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.text.x=element_text(angle=45, hjust=1))
return(p)
}
web_traffic_ot_viz(day_freq)
min(day_freq$date)
seq(min(day_freq$date), max(day_freq$date))
min(day_freq$date) + 2
as.Date(min(day_freq$date))
class(min(day_freq$date))
difftime(as.Date(min(day_freq$date)), as.Date(max(day_freq$date)))
difftime(as.Date(min(day_freq$date)), as.Date(max(day_freq$date))).day
difftime(as.Date(min(day_freq$date)), as.Date(max(day_freq$date)), units = "days")
day = difftime(as.Date(min(day_freq$date)), as.Date(max(day_freq$date)), units = "days")
day
class(day)
as.integer(day)
abs(as.integer(difftime(as.Date(min(day_freq$date)), as.Date(max(day_freq$date)), units = "days")))
62%6
62%%6
62/6
62/5
floor(62/5)
as.Date(min(day_freq$date)) + 12
labels = rep(as.Date(min(day_freq$date)), 5)
labels
class(labels)
day_skip = c(0, 1, 2, 3, 4, 5)
day_skip
day_skip * 12
seq(1, 5)
day_skip = floor(no_of_days/5) * seq(1, 5)
no_of_days = abs(as.integer(difftime(as.Date(min(day_freq$date)), as.Date(max(day_freq$date)), units = "days")))
no_of_days
day_skip = floor(no_of_days/5) * seq(1, 5)
day_skip
day_skip = floor(no_of_days/5) * seq(0, 4)
day_skip
as.Date(min(day_freq$date)) + 48
day_skip = floor(no_of_days/5) * seq(0, 5)
day_skip
labels
labels = rep(as.Date(min(day_freq$date)), 5)
labels * day_skip
labels + day_skip
labels
labels = rep(as.Date(min(day_freq$date)), 6)
labels + day_skip
labels = rep(as.Date(min(day_freq$date)), 6) + day_skip
labels
web_traffic_ot_viz = function(day_freq){
no_of_days = abs(as.integer(difftime(as.Date(min(day_freq$date)), as.Date(max(day_freq$date)), units = "days")))
day_skip = floor(no_of_days/5) * seq(0, 5)
labels = rep(as.Date(min(day_freq$date)), 6) + day_skip
p = ggplot(data=day_freq, aes(x=date, y=freq)) +
geom_col(fill='#00a3ad') +
ggtitle('NASA web traffic by date') +
ylab('Count of logged activities') +
xlab('Date') +
scale_x_discrete(breaks=labels, labels=as.character(labels)) +
theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.text.x=element_text(angle=45, hjust=1))
return(p)
}
web_traffic_ot_viz(day_freq)
labels
labels = rep(as.Date(min(day_freq$date)), 6) + day_skip
labels = as.character(rep(as.Date(min(day_freq$date)), 6) + day_skip)
labels
class(labels)
web_traffic_ot_viz = function(day_freq){
no_of_days = abs(as.integer(difftime(as.Date(min(day_freq$date)), as.Date(max(day_freq$date)), units = "days")))
day_skip = floor(no_of_days/5) * seq(0, 5)
labels = as.character(rep(as.Date(min(day_freq$date)), 6) + day_skip)
p = ggplot(data=day_freq, aes(x=date, y=freq)) +
geom_col(fill='#00a3ad') +
ggtitle('NASA web traffic by date') +
ylab('Count of logged activities') +
xlab('Date') +
scale_x_discrete(breaks=labels, labels=as.character(labels)) +
theme(axis.line = element_line(colour = "black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.text.x=element_text(angle=45, hjust=1))
return(p)
}
web_traffic_ot_viz(day_freq)
rm(p)
rm(web_plot)
rm(day_freq)
source('web_traffic.R')
web_plot = web_traffic_viz(web_traffic(df))
web_ot_plot = web_traffic_ot_viz(web_traffic_ot(df))
web_plot
web_ot_plot
grid.arrange(web_plot, web_ot_plot, ncol = 2)
library(gridExtra)
grid.arrange(web_plot, web_ot_plot, ncol = 2)
grid.arrange(web_plot, web_ot_plot, ncol = 1)
day_freq = web_traffic_ot(df)
day_freq
day_freq
head(df)
unique(df$host)
strsplit(df$host[1], '.')
df$host[1]
strsplit(df$host[1], '.')
strsplit(df$host[1], '[.]')
strsplit(df$host[1], '[.]')[-1]
strsplit(df$host[1], '[.]')[1]
strsplit(df$host[1], '[.]')[[1]]
strsplit(df$host[1], '[.]')[[1]][1]
strsplit(df$host[1], '[.]')[[1]][-1]
tail(strsplit(df$host[1], '[.]')[[1]])[1]
lapply(strsplit(df$host[1], '[.]'), tail, n=1)
as.character(lapply(strsplit(df$host[1], '[.]'), tail, n=1))
